import axios, { AxiosError, AxiosInstance } from 'axios';
import Constants from 'expo-constants';
import { io as socketIOClient, Socket } from 'socket.io-client';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import NetInfo from '@react-native-community/netinfo';

// Type definitions
interface AuthResponse {
    success: boolean;
    userId: string;
    token: string;
    message?: string;
}

interface UserResponse {
    id: string;
    email: string;
    role: 'student' | 'admin';
    name?: string;
}

interface User {
    id: string;
    email: string;
    role: 'student' | 'admin';
    displayName?: string;
}

// Helper function to get the API URL based on the environment
export const getApiUrl = () => {
  if (__DEV__) {
    // Handle development environment
    if (Platform.OS === 'android') {
      // For Android physical devices and emulators
      return 'http://10.0.2.2:3001/api'; // Special Android emulator localhost
    } else if (Platform.OS === 'ios') {
      // For iOS simulators and physical devices
      return Device.isDevice 
        ? 'http://192.168.8.24:3001/api'  // Physical iOS device
        : 'http://localhost:3001/api';     // iOS simulator
    } else {
      // Web platform
      return 'http://localhost:3001/api';
    }
  }
  
  // Production URL
  return Constants.expoConfig?.extra?.API_BASE_URL || 'http://192.168.8.24:3001/api';
};

const API_BASE = getApiUrl();
const SOCKET_URL = Constants.expoConfig?.extra?.SOCKET_URL || API_BASE.replace('/api', '');
let socket: Socket | null = null;

// Configure axios instance with proper timeout and error handling
const axiosInstance = axios.create({
  baseURL: API_BASE,
  timeout: 15000, // 15 second timeout
  headers: {
    'Content-Type': 'application/json',
  }
});

// Add response interceptor for better error handling
axiosInstance.interceptors.response.use(
  (response) => response,
  (error: AxiosError) => {
    if (error.code === 'ECONNABORTED') {
      throw new Error('Request timed out. Please try again.');
    }
    if (!error.response) {
      throw new Error('Unable to connect to server. Please check your internet connection.');
    }
    throw error;
  }
);

// Export the configured axios instance
export const apiClient = axiosInstance;

// Configure axios instance with proper timeout and error handling
const api = axios.create({
  baseURL: API_BASE,
  timeout: 15000, // 15 second timeout
  headers: {
    'Content-Type': 'application/json',
  }
});

// Add a request interceptor for network error handling
api.interceptors.request.use(
  async (config) => {
    // Check if network is available
    try {
      const response = await fetch(API_BASE + '/health');
      if (!response.ok) {
        throw new Error('Server is not responding');
      }
    } catch (error) {
      throw new Error('Unable to connect to server. Please check your internet connection.');
    }
    return config;
  },
  (error) => {
    return Promise.reject(new Error('Network request failed. Please check your connection.'));
  }
);

export interface Notification {
  id: string;
  title: string;
  description: string;
  date: string;
}

export interface Class {
  id: string;
  subject: string;
  instructor: string;
  time: string;
}

export interface Lesson {
  id: string;
  name: string;
  week: string;
}

export interface Document {
  name: string;
  status: string;
}

// No replacement needed, we'll delete this implementation

export interface Application {
  id: string;
  studentName: string;
  email: string;
  status: 'pending' | 'in_review' | 'approved' | 'rejected';
  submittedDate: string;
  documents: string[];
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'student' | 'admin';
  initials?: string;
  group?: string;
  notifications?: Notification[];
  classes?: Class[];
  lessons?: Lesson[];
}

export interface AuthResponse {
  success: boolean;
  userId: string;
  token: string;
  message?: string;
}

export async function login(email: string, password: string): Promise<AuthResponse> {
  try {
    const response = await apiClient.post('/auth/login', { email, password });
    return response.data;
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('Login failed. Please try again.');
  }
}

export async function register(
  email: string, 
  password: string, 
  role: 'student' | 'admin', 
  name?: string
): Promise<AuthResponse> {
  try {
    const response = await apiClient.post('/auth/register', {
      email,
      password,
      role,
      name
    });
    return response.data;
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('Registration failed. Please try again.');
  }
}

export async function fetchUser(userId: string, token: string): Promise<User> {
  try {
    const response = await apiClient.get(`/users/${userId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.data;
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('Failed to fetch user data');
  }
}

export async function fetchUserDocuments(userId: string): Promise<Document[]> {
  const res = await api.get(`/users/${userId}/documents`);
  return res.data;
}

export async function fetchUserApplicationStatus(userId: string): Promise<{ status: string; lastUpdated: string }> {
  const res = await api.get(`/users/${userId}/application-status`);
  return res.data;
}

export async function fetchUserSponsorships(userId: string): Promise<any> {
  const res = await api.get(`/users/${userId}/sponsorships`);
  return res.data;
}

export async function fetchUserNotifications(userId: string): Promise<Notification[]> {
  const res = await api.get(`/users/${userId}/notifications`);
  return res.data;
}

export async function fetchApplications() {
  const res = await axios.get(`${API_BASE}/applications`);
  return res.data;
}

// Create axios instance with default config
const api = axios.create({
  baseURL: API_BASE,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Intercept requests to add auth token
api.interceptors.request.use(async (config) => {
  const token = await AsyncStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Intercept responses to handle common errors
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      // Token expired or invalid
      await AsyncStorage.multiRemove(['token', 'user']);
      // Redirect to login
      // You'll need to implement this using your navigation
    }
    return Promise.reject(error);
  }
);

export interface AuthResponse {
  success: boolean;
  token?: string;
  userId?: string;
  role?: 'student' | 'admin';
  user?: User;
  message?: string;
}

export async function login(email: string, password: string): Promise<AuthResponse> {
  try {
    const response = await api.post('/login', {
      email,
      password,
      deviceInfo: {
        platform: Platform.OS,
        version: Platform.Version,
        manufacturer: Device.manufacturer,
        model: Device.modelName
      }
    });
    
    if (response.data.token) {
      await AsyncStorage.setItem('token', response.data.token);
      await AsyncStorage.setItem('user', JSON.stringify(response.data.user));
    }
    
    return response.data;
  } catch (error) {
    console.error('Login error:', error);
    throw new Error(
      error.response?.data?.message || 
      'Unable to login. Please check your credentials.'
    );
  }
}

export async function register(
  email: string, 
  password: string, 
  role: 'student' | 'admin', 
  name: string
): Promise<AuthResponse> {
  console.log('Starting registration process at:', API_BASE);
  
  try {
    // Basic validation
    if (!email || !password || !name) {
      throw new Error('All fields are required');
    }
    if (password.length < 8) {
      throw new Error('Password must be at least 8 characters');
    }
    if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) {
      throw new Error('Invalid email format');
    }

    // Check server health first
    try {
      console.log('Checking server health...');
      const healthCheck = await api.get('/health');
      console.log('Server health check passed:', healthCheck.data);
    } catch (healthError: any) {
      console.error('Server health check failed:', healthError);
      throw new Error('Unable to connect to server. Please check your internet connection.');
    }

    console.log('Sending registration request...');
    const response = await api.post('/register', {
      email,
      password,
      role,
      name,
      deviceInfo: {
        platform: Platform.OS,
        version: Platform.Version,
        manufacturer: Device.manufacturer,
        model: Device.modelName
      }
    });

    console.log('Registration request successful');
    
    if (response.data.token) {
      await AsyncStorage.setItem('token', response.data.token);
      await AsyncStorage.setItem('user', JSON.stringify(response.data.user));
    }

    return response.data;
  } catch (error: any) {
    console.error('Registration error:', error);
    
    if (axios.isAxiosError(error)) {
      if (!error.response) {
        console.error('Network error - no response:', error.message);
        throw new Error('Network connection failed. Please check your internet connection.');
      }
      if (error.response.status === 400) {
        console.error('Bad request:', error.response.data);
        throw new Error(error.response.data.message || 'Invalid registration data. Please check your inputs.');
      }
      if (error.response.status === 409) {
        console.error('Conflict:', error.response.data);
        throw new Error(error.response.data.message || 'Email already registered. Please use a different email.');
      }
      if (error.response.status >= 500) {
        console.error('Server error:', error.response.data);
        throw new Error('Server error. Please try again later.');
      }
      if (error.response.data?.message) {
        throw new Error(error.response.data.message);
      }
    }
    
    throw new Error('Registration failed. Please try again.');
  }
}

export async function resetPassword(email: string, newPassword: string): Promise<AuthResponse> {
  try {
    if (!email || !newPassword) {
      throw new Error('Email and new password are required');
    }
    if (newPassword.length < 8) {
      throw new Error('New password must be at least 8 characters');
    }

    const response = await api.post('/reset-password', { 
      email, 
      newPassword,
      deviceInfo: {
        platform: Platform.OS,
        version: Platform.Version
      }
    });
    return response.data;
  } catch (error) {
    console.error('Password reset error:', error);
    throw new Error(
      error.response?.data?.message || 
      'Password reset failed. Please try again.'
    );
  }
}

export function connectSocket(userId: string) {
  if (!socket) {
    socket = socketIOClient(SOCKET_URL);
    socket.on('connect', () => {
      socket.emit('join', userId);
    });
  }
  return socket;
}

export function onSocketEvent(event: string, callback: (data: any) => void) {
  if (socket) {
    socket.on(event, callback);
  }
} 