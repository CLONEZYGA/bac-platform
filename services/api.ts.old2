import axios, { AxiosError, AxiosInstance } from 'axios';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import * as Device from 'expo-device';
import NetInfo from '@react-native-community/netinfo';

// Types
export interface AuthResponse {
    success: boolean;
    userId: string;
    token: string;
    message?: string;
}

export interface User {
    id: string;
    name?: string;
    email: string;
    role: 'student' | 'admin';
}

// API URL Configuration
export const getApiUrl = () => {
    if (__DEV__) {
        // Handle development environment
        if (Platform.OS === 'android') {
            if (Device.isDevice) {
                // Physical Android device
                return 'http://192.168.8.24:3001/api';
            } else {
                // Android emulator
                return 'http://10.0.2.2:3001/api';
            }
        } else if (Platform.OS === 'ios') {
            // For iOS simulators and physical devices
            return Device.isDevice 
                ? 'http://192.168.8.24:3001/api'  // Physical iOS device
                : 'http://localhost:3001/api';     // iOS simulator
        }
        // Web platform
        return 'http://localhost:3001/api';
    }
    return Constants.expoConfig?.extra?.API_BASE_URL || 'http://192.168.8.24:3001/api';
};

// Interface for API responses
interface ApiResponse<T = any> {
    data: T;
    status: number;
    headers: Record<string, string>;
}

// Type for axios response
type AxiosResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: Record<string, string>;
    config: any;
}

// Create axios instance with configuration
const axiosInstance = axios.create({
    baseURL: getApiUrl(),
    timeout: 15000, // 15 second timeout
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    },
    validateStatus: (status) => status >= 200 && status < 500 // Handle all responses
});

// Network check function
const checkNetworkConnection = async () => {
    const networkState = await NetInfo.fetch();
    if (!networkState.isConnected) {
        throw new Error('No internet connection available');
    }
};

// Add request interceptor for network checks
axiosInstance.interceptors.request.use(
    async (config) => {
        await checkNetworkConnection();
        return config;
    },
    (error) => {
        return Promise.reject(new Error('Network request failed. Please check your connection.'));
    }
);

// Add response interceptor for error handling
axiosInstance.interceptors.response.use(
    (response) => response,
    (error: AxiosError<{message?: string}>) => {
        if (error.code === 'ECONNABORTED') {
            throw new Error('Request timed out. Please try again.');
        }
        if (!error.response) {
            throw new Error('Unable to connect to server. Please check your internet connection.');
        }
        const errorMessage = error.response.data?.message || 'An unexpected error occurred';
        throw new Error(errorMessage);
    }
);

// Auth API functions
export const login = async (email: string, password: string): Promise<AuthResponse> => {
    try {
        const response = await axiosInstance.post('/auth/login', { email, password });
        return response.data;
    } catch (error) {
        if (error instanceof Error) {
            throw error;
        }
        throw new Error('Login failed. Please try again.');
    }
};

export const register = async (
    email: string,
    password: string,
    role: 'student' | 'admin',
    name?: string
): Promise<AuthResponse> => {
    // Add debug logging for physical device testing
    console.log('Starting registration process...');
    console.log('Current API URL:', getApiUrl());
    console.log('Platform:', Platform.OS);
    console.log('Is physical device:', await Device.isDevice);
    try {
        // Log the request details (remove in production)
        console.log('Registration attempt:', {
            url: axiosInstance.defaults.baseURL,
            email,
            role,
            name,
            platform: Platform.OS,
            isDevice: Device.isDevice
        });

        // Check network connectivity first
        const networkState = await NetInfo.fetch();
        if (!networkState.isConnected) {
            throw new Error('No internet connection. Please check your network settings.');
        }

        // Check server health before attempting registration
        const isHealthy = await checkServerHealth();
        if (!isHealthy) {
            throw new Error('Unable to connect to server. Please try again later.');
        }

        // Make the registration request with timeout handling
        const response = await Promise.race([
            axiosInstance.post('/auth/register', {
                email,
                password,
                role,
                name
            }),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Request timed out')), 15000)
            )
        ]);

        if (!response || !response.data) {
            throw new Error('Invalid server response');
        }

        // Log success (remove in production)
        console.log('Registration successful:', response.data);
        
        return response.data;
    } catch (error) {
        console.error('Registration error details:', error);
        
        if (axios.isAxiosError(error)) {
            const message = error.response?.data?.message || error.message;
            throw new Error(`Registration failed: ${message}`);
        }
        
        if (error instanceof Error) {
            throw error;
        }
        
        throw new Error('Registration failed. Please try again.');
    }
};

export const fetchUser = async (userId: string, token: string): Promise<User> => {
    try {
        const response = await axiosInstance.get(`/users/${userId}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    } catch (error) {
        if (error instanceof Error) {
            throw error;
        }
        throw new Error('Failed to fetch user data');
    }
};

// Health check function
export const checkServerHealth = async (): Promise<boolean> => {
    try {
        await axiosInstance.get('/health');
        return true;
    } catch (error) {
        return false;
    }
};

// Export the configured axios instance for other API calls
export const apiClient = axiosInstance;
